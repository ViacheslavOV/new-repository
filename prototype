// Базовий прототип.
abstract class Shape is
    field X: int
    field Y: int
    field color: string

    // Звичайний конструктор.
    constructor Shape() is
        // ...

    // Конструктор прототипа.
    constructor Shape(source: Shape) is
        this()
        this.X = source.X
        this.Y = source.Y
        this.color = source.color

    // Результатом операції клонування завжди буде об'єкт з
    // ієрархії класів Shape.
    abstract method clone(): Shape


// Конкретний прототип. Метод клонування створює новий об'єкт
// поточного класу, передаючи до конструктора посилання на
// власний об'єкт. Завдяки цьому, клонування виходить
// атомарним — доки не виконається конструктор, нового об'єкта
// ще не існує. Але як тільки конструктор завершено, ми
// отримаємо завершений об'єкт-клон, а не порожній об'єкт, який
// потрібно ще заповнити.
class Rectangle extends Shape is
    field width: int
    field height: int

    constructor Rectangle(source: Rectangle) is
        // Виклик батьківського конструктора потрібен, щоб
        // скопіювати потенційні приватні поля, оголошені в
        // батьківському класі.
        super(source)
        this.width = source.width
        this.height = source.height

    method clone(): Shape is
        return new Rectangle(this)


class Circle extends Shape is
    field radius: int

    constructor Circle(source: Circle) is
        super(source)
        this.radius = source.radius

    method clone(): Shape is
        return new Circle(this)


// Десь у клієнтському програмному коді.
class Application is
    field shapes: array of Shape

    constructor Application() is
        Circle circle = new Circle()
        circle.X = 10
        circle.Y = 10
        circle.radius = 20
        shapes.add(circle)

        Circle anotherCircle = circle.clone()
        shapes.add(anotherCircle)
        // anotherCircle буде містити точну копію circle.

        Rectangle rectangle = new Rectangle()
        rectangle.width = 10
        rectangle.height = 20
        shapes.add(rectangle)

    method businessLogic() is
        // Неочевидний плюс Прототипу в тому, що ви можете
        // клонувати набір об'єктів, не знаючи їхніх конкретних
        // класів.
        Array shapesCopy = new Array of Shapes.

        // Наприклад, ми не знаємо, які конкретно об'єкти
        // знаходяться всередині масиву shapes так як його
        // оголошено з типом Shape. Але завдяки поліморфізму, ми
        // можемо клонувати усі об'єкти «наосліп». Буде виконано
        // метод clone того класу, яким є цей об'єкт.
        foreach (s in shapes) do
            shapesCopy.add(s.clone())

        // Змінна shapesCopy буде містити точні копії елементів
        // масиву shapes.
